/**
 * MVP Core Game Types
 *
 * Defines the simplified domain models and interfaces for the
 * Minimum Viable Product of the text-based AI RPG.
 */

/**
 * Represents the response from the AI after processing a narrative turn or decision.
 */
export interface SimplifiedNarrativeResponse {
  /** The main narrative text generated by the AI. */
  narrativeText: string;
  /** An array of choices (as strings) for the player. Typically 2-4 options. */
  choices: string[];
  /**
   * Optional: A simple string describing an immediate, direct consequence or outcome
   * of the current narrative beat or the player's last action.
   * e.g., "You found a rusty key.", "The guard looks suspicious."
   */
  immediateOutcome?: string;
}

/**
 * Represents an NPC within a location. For MVP, this is primarily descriptive.
 * Complex state and behavior will be AI-driven based on context.
 */
export interface MVPLocationNpc {
  id: string;
  name: string;
  description: string;
  /** Simple indicator of initial disposition, can be used by AI. */
  relationshipToPlayer?: "friendly" | "neutral" | "hostile" | string;
}

/**
 * Represents a game location.
 */
export interface MVPLocation {
  id: string;
  name: string;
  description: string;
  /** IDs of locations connected to this one. */
  connectedLocationIds: string[];
  /** List of item IDs or names present in the location (descriptive). */
  itemsPresent?: string[];
  /** NPCs present in the location (descriptive). */
  npcs?: MVPLocationNpc[];
  /** Any other static descriptive properties relevant to the location. */
  properties?: Record<string, string | boolean | number>;
}

/**
 * Simplified state for the player character.
 */
export interface SimplifiedCharacterState {
  id: string;
  name: string;
  /**
   * A simple key-value store for character-specific flags, conditions, or simple inventory items.
   * e.g., { "hasRustyKey": true, "isInjured": false, "mana": 50 }
   */
  flags: Record<string, boolean | string | number>;
  /** Optional: A brief string describing the character's current status or mood. */
  status?: string;
}

/**
 * Simplified state for the game world.
 */
export interface SimplifiedWorldState {
  id: string;
  name: string;
  /**
   * Key global flags affecting the narrative or game world.
   * e.g., { "ancientEvilAwakened": true, "isNight": false }
   */
  globalFlags: Record<string, boolean | string | number>;
}

/**
 * Represents a single entry in the narrative log.
 */
export interface NarrativeLogEntry {
  turn: number;
  narrative: string;
  playerChoice?: string;
  /** The immediate outcome associated with this narrative segment or choice. */
  outcome?: string;
}

/**
 * Core game state for the MVP.
 * This is the primary object that will be persisted and updated each turn.
 */
export interface SimplifiedGameState {
  /** Unique identifier for this specific game state snapshot. */
  id: string;
  /** Identifier for the overall game session. */
  sessionId: string;
  /** Identifier for the player's character. */
  characterId: string;
  /** Identifier for the world being played in. */
  worldId: string;

  turnNumber: number;

  characterState: SimplifiedCharacterState;
  worldState: SimplifiedWorldState;
  /** ID of the character's current location. References MVPLocation.id */
  currentLocationId: string;

  /**
   * A log of the narrative progression, including player choices and outcomes.
   * This provides context for the AI and a history for the player.
   */
  narrativeLog: NarrativeLogEntry[];

  /** The current set of choices (as strings) presented to the player by the AI. */
  currentChoices: string[];

  /** Timestamp of when this game state was last modified. */
  lastModified: Date;

  /** Optional: A simple string describing the player's current main objective or quest. */
  currentObjective?: string;
}
